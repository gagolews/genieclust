% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mst.R
\name{mst}
\alias{mst}
\alias{mst.default}
\alias{mst.dist}
\title{Minimum Spanning Tree of the Pairwise Distance Graph}
\usage{
mst(d, ...)

\method{mst}{default}(
  d,
  distance = c("euclidean", "l2", "manhattan", "cityblock", "l1", "cosine"),
  M = 1L,
  verbose = FALSE,
  ...
)

\method{mst}{dist}(d, M = 1L, verbose = FALSE, ...)
}
\arguments{
\item{d}{either a numeric matrix (or an object coercible to one,
e.g., a data frame with numeric-like columns) or an
object of class \code{dist}; see \code{\link[stats]{dist}}}

\item{...}{further arguments passed to or from other methods,
in particular, to \code{\link[quitefastmst]{mst_euclid}}}

\item{distance}{metric used in the case where \code{d} is a matrix; one of:
\code{"euclidean"} (synonym: \code{"l2"}),
\code{"manhattan"} (a.k.a. \code{"l1"} and \code{"cityblock"}),
\code{"cosine"}}

\item{M}{smoothing factor; \code{M} = 1 selects the requested
\code{distance}; otherwise, the corresponding degree-\code{M} mutual
reachability distance is used; \code{M} should be rather small,
say, \eqn{\leq 20}}

\item{verbose}{logical; whether to print diagnostic messages
and progress information}
}
\value{
Returns a numeric matrix of class \code{mst} with \eqn{n-1} rows and
three columns: \code{from}, \code{to}, and \code{dist} sorted
nondecreasingly. Its i-th row specifies the i-th edge of the MST
which is incident to the vertices \code{from[i]} and \code{to[i]} with
\code{from[i] < to[i]}  (in 1,...,n)
and \code{dist[i]} gives the corresponding weight, i.e., the
distance between the point pair.

The \code{Size} attribute specifies the number of points, \eqn{n}.
The \code{Labels} attribute gives the labels of the input points,
if available.
The \code{method} attribute provides the name of the distance function used.

If \eqn{M>1}, the \code{nn.index} attribute gives the indices
of the \code{M}-1 nearest neighbours of each point
and \code{nn.dist} provides the corresponding distances,
both in the form of an \eqn{n} by \eqn{M-1} matrix.
}
\description{
Determine a(*) minimum spanning tree (MST) of the complete
undirected graph representing a set of \eqn{n} points
whose weights correspond to the pairwise distances between the points.
}
\details{
(*) Note that if the distances are non unique,
there might be multiple minimum trees spanning a given graph.

If \code{d} is a matrix and the use of Euclidean distance is requested
(the default), then \code{\link[quitefastmst]{mst_euclid}} is called
to determine the MST.  As it is based on K-d trees, it is quite fast
in low dimensional spaces, even for 10M points.

Otherwise, a much slower implementation of the Jarník (Prim/Dijkstra)-like
method, which requires \eqn{O(n^2)} time.  The algorithm is parallelised;
the number of threads is determined by the \code{OMP_NUM_THREADS} environment
variable. As a rule of thumb, datasets up to 100k points
should be processed quite quickly (within a few minutes).

If \eqn{M>1}, then the mutual reachability distance \eqn{m(i,j)}
with the smoothing factor \eqn{M} (see Campello et al. 2013)
is used instead of the chosen "raw" distance \eqn{d(i,j)}.
It holds \eqn{m(i, j)=\max\{d(i,j), c(i), c(j)\}}, where \eqn{c(i)} is
the core distance, i.e., the distance between the \eqn{i}-th point and
its (\code{M}-1)-th nearest neighbour.
This makes "noise" and "boundary" points being "pulled away" from each other.
The Genie++ clustering algorithm (see \code{\link{gclust}}) with respect to
the mutual reachability distance can mark some observations as noise points.
}
\examples{
library("datasets")
data("iris")
X <- jitter(as.matrix(iris[1:2]))  # some data
T <- mst(X)
plot(X, asp=1, las=1)
segments(X[T[, 1], 1], X[T[, 1], 2],
         X[T[, 2], 1], X[T[, 2], 2])

}
\references{
V. Jarník, O jistem problemu minimalnim,
\emph{Prace Moravske Prirodovedecke Spolecnosti} 6, 1930, 57-63.

C.F. Olson, Parallel algorithms for hierarchical clustering,
\emph{Parallel Computing} 21, 1995, 1313-1325.

R. Prim, Shortest connection networks and some generalisations,
\emph{The Bell System Technical Journal} 36(6), 1957, 1389-1401.

O. Borůvka, O jistém problému minimálním, \emph{Práce Moravské
Přírodovědecké Společnosti} 3, 1926, 37–58.

J.L. Bentley, Multidimensional binary search trees used for associative
searching, \emph{Communications of the ACM} 18(9), 509–517, 1975,
\doi{10.1145/361002.361007}.
W.B. March, R. Parikshit, A.G. Gray, Fast Euclidean minimum spanning
tree: Algorithm, analysis, and applications, \emph{Proc. 16th ACM SIGKDD
Intl. Conf. Knowledge Discovery and Data Mining (KDD '10)}, 2010, 603–612.

Campello R.J.G.B., Moulavi D., Sander J.,
Density-based clustering based on hierarchical density estimates,
\emph{Lecture Notes in Computer Science} 7819, 2013, 160-172,
\doi{10.1007/978-3-642-37456-2_14}.
}
\seealso{
The official online manual of \pkg{genieclust} at \url{https://genieclust.gagolewski.com/}

Gagolewski M., \pkg{genieclust}: Fast and robust hierarchical clustering, \emph{SoftwareX} 15:100722, 2021, \doi{10.1016/j.softx.2021.100722}.

\code{\link[quitefastmst]{mst_euclid}}
}
\author{
\href{https://www.gagolewski.com/}{Marek Gagolewski} and other contributors
}
